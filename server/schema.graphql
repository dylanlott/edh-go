scalar Time

type Mutation {
  signup(input: InputSignup): User!
  postMessage(user: String!, text: String!): Message
  createGame(input: InputGame!): Game!
  updateGame(input: InputGame!): Game!
  createDeck(input: InputDeck): BoardState 
  updateBoardState(input: InputBoardState!): BoardState
}

type Query {
  messages: [Message!]!
  users: [String!]!
  games: [Game!]!
  boardstates(gameID: String!, userID: String): [BoardState!]!
  boardstate(gameID: String!, userID: String!): BoardState!
  decks(userID: String!): [Deck!]
  card(name: String!, id: String): [Card!]
  cards(list: [String!]): [Card!]!
  search(name: String, colors: String, colorIdentity: String, keywords: [String]): [Card]
}

type Subscription {
  messagePosted(user: String!): Message!
  gameUpdated(game: InputGame!): Game!
  userJoined(user: String!, gameID: String!): String!
  boardUpdate(boardstate: InputBoardState!): BoardState!
}

type Message {
  id: String!
  user: String!
  createdAt: Time!
  text: String!
  gameID: String!
  channel: String
}

type Card {
  Name: String!
  ID: String!
  Quantity: Int,
  Colors: String
  ColorIdentity: String
  CMC: String
  ManaCost: String
  UUID: String
  Power: String
  Toughness: String
  Types: String
  Subtypes: String
  Supertypes: String
  IsTextless: String
  Text: String
  TCGID: String
  ScryfallID: String
}

type User {
  id: String!
  username: String!
  deck: String!
}

type Deck {
  ID: String!
  Name: String!
  Commander: String!
  Library: [String!]
}

type Game {
  id: String!
  handle: String
  created_at: Time!
  rules: [Rule!]
  turn: Turn!
  players: [BoardState!]!
}

type Turn {
  Player: String!
  Phase: String!
  Number: Int!
}

type Rule {
  name: String!
  value: String!
}

type Emblem {
  name: String!
  value: String!
  player: User!
}

type Counter {
  card: Card!
  name: String!
  value: String!
}

type BoardState {
  User: User!
  GameID: String!
  Commander: [Card!]!
  Library: [Card!]!
  Graveyard: [Card!]!
  Exiled: [Card!]!
  Field: [Card!]!
  Hand: [Card!]!
  Revealed: [Card!]!
  Controlled: [Card!]!
  Counters: [Counter!]
}

input InputCard {
  ID: String
  Name: String!
  Counters: [InputCounter]
  Labels: [InputLabel]
}

input InputCounter {
  card: InputCard
  name: String!
  value: String!
}

input InputBoardState {
  User: InputUser!
  GameID: String!
  Decklist: String,
  Commander: [InputCard]
  Library: [InputCard]
  Graveyard: [InputCard]
  Exiled: [InputCard]
  Field: [InputCard]
  Hand: [InputCard]
  Revealed: [InputCard]
  Controlled: [InputCard]
  Counters: [InputCounter]
  Emblems: [InputEmblem]
}

input InputSignup {
  Username: String!
  Email: String!
  Password: String!
}

input InputEmblem {
  name: String!
  value: String!
  player: InputUser!
}

input InputUser {
  Deck: InputDeck
  Username: String!
}

input InputGame {
  ID: String!
  Turn: InputTurn!
  Handle: String
  Players: [InputBoardState!]!
}

input InputTurn {
  Player: String!
  Phase: String !
  Number: Int!
}
input InputDeck {
  name: String
  commander: [String!]
  cards: [String!]
}

input InputLabel {
  name: String!
  value: String!
  assigned_by: String!
}