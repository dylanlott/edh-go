scalar Time

type Mutation {
  signup(username: String!, password: String!): User!
  login(username: String!, password: String!): User!
  postMessage(user: String!, text: String!): Message
  createGame(input: InputCreateGame!): Game!
  joinGame(input: InputJoinGame): Game!
  updateGame(input: InputGame!): Game!
  createDeck(input: InputDeck): BoardState 
  updateBoardState(input: InputBoardState!): BoardState!
}

type Query {
  messages: [Message!]!
  users(userID: String): [String!]!
  games(gameID: String): [Game!]!
  boardstates(gameID: String!, userID: String): [BoardState!]!
  card(name: String!, id: String): [Card!]
  cards(list: [String!]): [Card!]!
  search(name: String, colors: [String], colorIdentity: [String], keywords: [String]): [Card]
}

type Subscription {
  messagePosted(user: String!): Message!
  gameUpdated(gameID: String!): Game!
  userJoined(user: String!, gameID: String!): String!
  boardstatePosted(boardstate: InputBoardState!): BoardState!
}

type Message {
  ID: String!
  User: String!
  CreatedAt: Time!
  Text: String!
  GameID: String!
  Channel: String
}

type Card {
  Name: String!
  ID: String!
  Quantity: Int
  Tapped: Boolean
  Flipped: Boolean
  Counters: [Counter] 
  Colors: String
  ColorIdentity: String
  CMC: String
  ManaCost: String
  UUID: String
  Power: String
  Toughness: String
  Types: String
  Subtypes: String
  Supertypes: String
  IsTextless: String
  Text: String
  TCGID: String
  ScryfallID: String
}

type User {
  ID: String!
  Username: String!
  Password: String
  Token: String
}

type Game {
  ID: String!
  CreatedAt: Time!
  Rules: [Rule!]
  Turn: Turn
  PlayerIDs: [User!]
}

type Turn {
  Player: String!
  Phase: String!
  Number: Int!
}

type Rule {
  Name: String!
  Value: String!
}

type Emblem {
  Name: String!
  Value: String!
  Player: User!
}

type Counter {
  Name: String!
  Value: String!
}

type BoardState {
  User: User!
  Life: Int! 
  GameID: String!
  Commander: [Card!]!
  Library: [Card!]!
  Graveyard: [Card!]!
  Exiled: [Card!]!
  Field: [Card!]!
  Hand: [Card!]!
  Revealed: [Card!]!
  Controlled: [Card!]!
  Counters: [Counter!]
}

input InputCard {
  ID: String
  Name: String!
  Counters: [InputCounter]
  Labels: [InputLabel]
  Tapped: Boolean 
  Flipped: Boolean
  Quantity: Int
  Colors: String
  ColorIdentity: String
  CMC: String
  ManaCost: String
  UUID: String
  Power: String
  Toughness: String
  Types: String
  Subtypes: String
  Supertypes: String
  IsTextless: String
  Text: String
  TCGID: String
  ScryfallID: String
}

input InputCounter {
  Card: InputCard
  Name: String!
  Value: String!
}

input InputBoardState {
  User: InputUser!
  GameID: String!
  Life: Int!
  Decklist: String,
  Commander: [InputCard]
  Library: [InputCard]
  Graveyard: [InputCard]
  Exiled: [InputCard]
  Field: [InputCard]
  Hand: [InputCard]
  Revealed: [InputCard]
  Controlled: [InputCard]
  Counters: [InputCounter]
  Emblems: [InputEmblem]
}

input InputSignup {
  Username: String!
  Email: String!
  Password: String!
}

input InputEmblem {
  Name: String!
  Value: String!
  Player: InputUser!
}

input InputUser {
  Username: String!
  ID: String
}

input InputCreateGame {
  ID: String!
  Turn: InputTurn!
  Handle: String
  Players: [InputBoardState!]!
}

input InputJoinGame {
  ID: String!
  User: InputUser!
  Handle: String
  Decklist: String
  BoardState: InputBoardState!
}

input InputGame {
  ID: String!
  Turn: InputTurn
  CreatedAt: Time
  Handle: String
  PlayerIDs: [InputUser!]
  Rules: [InputRule]
}

input InputRule {
  Name: String!
  Value: String!
}

input InputTurn {
  Player: String!
  Phase: String !
  Number: Int!
}

input InputDeck {
  Name: String
  Commander: [String!]
  Cards: [String!]
}

input InputLabel {
  Name: String!
  Value: String!
  AssignedBy: String!
}